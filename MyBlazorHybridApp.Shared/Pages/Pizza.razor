@page "/pizza"
@using MyBlazorHybridApp.Shared.Model
@using System.Net.Http
@using System.Net.Http.Json
@using Microsoft.Extensions.DependencyInjection
@using Microsoft.Extensions.Http
@using MyBlazorHybridApp.Shared.Services
@inject OrderState OrderState
@using BlazingPizza
@inject IFormFactor FormFactor
@inject HttpClient HttpClient
@inject IHttpClientFactory HttpClientFactory
@using MyBlazorHybridApp.Shared.Layout

@* 1. Container Utama untuk Layout Dua Kolom *@
<div class="pizza-delivery-page">

    @* Kolom Kiri: Daftar Pizza *@
    <div class="pizza-list-column"> 
        <h3>Today's Pizza Specials</h3>
        <h1>Blazing Pizzas</h1>
        @if (specials is null && errorMessage is null) { <p><em>Loading...</em></p> }
        else if (errorMessage != null) { <div class="alert alert-danger">@errorMessage</div> }
        else
        {
            <ul class="pizza-cards">
                @foreach (var special in specials!)
                {
                    <li @onclick="@(() => OrderState.ShowConfigurePizzaDialog(special))" style="background-image: url('@special.ImageUrl')">
                        <div class="pizza-info">
                            <span class="title">@special.Name</span>
                            @special.Description
                            <span class="price">@special.GetFormattedBasePrice()</span>
                        </div>
                    </li>
                }
            </ul>
        }
    </div>

    @* Kolom Kanan: Ringkasan Pesanan (Menggunakan style .sidebar asli tapi di class baru) *@
    <div class="order-summary-column sidebar"> @* Pakai class sidebar untuk style internalnya *@
        @if (order.Pizzas.Any())
        {
            <div class="order-contents">
                <h2>Your order</h2>
                @foreach (var configuredPizza in order.Pizzas)
                {
                    <div class="cart-item">
                        <div class="title">@(configuredPizza.Size)" @configuredPizza.Special.Name</div>
                        <div class="item-price">
                            @configuredPizza.GetFormattedTotalPrice()
                            <a @onclick="@(() => OrderState.RemoveConfiguredPizza(configuredPizza))" class="delete-item">x</a>
                        </div>
                    </div>
                }
            </div>
        }
        else
        {
            <div class="empty-cart">Choose a pizza<br>to get started</div>
        }
        <div class="order-total @(order.Pizzas.Any() ? "" : "hidden")">
            Total:
            <span class="total-price">@order.GetFormattedTotalPrice()</span>
            <a href="checkout" class="@(OrderState.Order.Pizzas.Count == 0 ? "btn btn-warning disabled" : "btn btn-warning")">
                Order >
            </a>
        </div>
    </div>

</div> @* Akhir dari pizza-delivery-page *@


@* Dialog Konfigurasi *@
@if (OrderState.ShowingConfigureDialog)
{
    <ConfigurePizzaDialog
        Pizza="OrderState.ConfiguringPizza"
        OnCancel="OrderState.CancelConfigurePizzaDialog"
        OnConfirm="OrderState.ConfirmConfigurePizzaDialog" />
}

@code { 
    List<PizzaSpecial> specials = new();
    Order order => OrderState.Order;
    string? errorMessage;
        
    protected override async Task OnInitializedAsync()
    {
        try
        {
            var client = HttpClientFactory.CreateClient("BackendApi");
            specials = await client.GetFromJsonAsync<List<PizzaSpecial>>("api/Specials") ?? new();
        }
        catch (Exception ex)
        {
            errorMessage = $"Error fetching pizza specials: {ex.Message}";
        }
    }
}